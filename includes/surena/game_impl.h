// set all the game methods to their implementation, or NULL if they were marked unused my GF_UNUSED
// clang-format off
.get_last_error = (get_last_error_gf_t)get_last_error,
.create = (create_gf_t)create,
.export_options_str = (export_options_str_gf_t)export_options_str,
.get_options_bin_ref = (get_options_bin_ref_gf_t)get_options_bin_ref,
.destroy = (destroy_gf_t)destroy,
.clone = (clone_gf_t)clone,
.copy_from = (copy_from_gf_t)copy_from,
.compare = (compare_gf_t)compare,
.import_state = (import_state_gf_t)import_state,
.export_state = (export_state_gf_t)export_state,
.serialize = (serialize_gf_t)serialize,
.players_to_move = (players_to_move_gf_t)players_to_move,
.get_concrete_moves = (get_concrete_moves_gf_t)get_concrete_moves,
.get_concrete_move_probabilities = (get_concrete_move_probabilities_gf_t)get_concrete_move_probabilities,
.get_concrete_moves_ordered = (get_concrete_moves_ordered_gf_t)get_concrete_moves_ordered,
.get_actions = (get_actions_gf_t)get_actions,
.is_legal_move = (is_legal_move_gf_t)is_legal_move,
.move_to_action = (move_to_action_gf_t)move_to_action,
.is_action = (is_action_gf_t)is_action,
.make_move = (make_move_gf_t)make_move,
.get_results = (get_results_gf_t)get_results,
.export_legacy = (export_legacy_gf_t)export_legacy,
.get_sync_counter = (get_sync_counter_gf_t)get_sync_counter,
.get_scores = (get_scores_gf_t)get_scores,
.id = (id_gf_t)id,
.eval = (eval_gf_t)eval,
.discretize = (discretize_gf_t)discretize,
.playout = (playout_gf_t)playout,
.redact_keep_state = (redact_keep_state_gf_t)redact_keep_state,
.export_sync_data = (export_sync_data_gf_t)export_sync_data,
.release_sync_data = (release_sync_data_gf_t)release_sync_data,
.import_sync_data = (import_sync_data_gf_t)import_sync_data,
.get_move_code = (get_move_code_gf_t)get_move_code,
.get_move_str = (get_move_str_gf_t)get_move_str,
.debug_print = (debug_print_gf_t)debug_print,
